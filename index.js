// ========== FLEX + FALLBACK ==========

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Bubble ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏£‡∏≠‡∏ö
function buildFlexRoundPairs(title, lines) {
  return {
    type: 'flex',
    altText: title,
    contents: {
      type: 'bubble',
      header: {
        type: 'box', layout: 'vertical',
        contents: [
          { type: 'text', text: title, weight: 'bold', size: 'lg' },
          { type: 'text', text: nowTH(), size: 'xs', color: '#999' }
        ]
      },
      body: {
        type: 'box', layout: 'vertical', spacing: 'sm',
        contents: lines.map(t => ({ type: 'text', text: t, wrap: true }))
      }
    }
  };
}

// ‡∏™‡πà‡∏á Flex ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‚â§10 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î/‡∏ö‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏•)
// ‡∏ñ‡πâ‡∏≤ Flex ‡∏•‡πâ‡∏° ‡∏à‡∏∞ fallback ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
async function tryPushFlexOrText(to, title, lines) {
  const MAX_LINES_PER_BUBBLE = 10;
  const chunks = [];
  for (let i = 0; i < lines.length; i += MAX_LINES_PER_BUBBLE) {
    chunks.push(lines.slice(i, i + MAX_LINES_PER_BUBBLE));
  }
  try {
    for (let i = 0; i < chunks.length; i++) {
      const pageTitle = chunks.length > 1
        ? `${title} (‡∏´‡∏ô‡πâ‡∏≤ ${i + 1}/${chunks.length})`
        : title;
      await client.pushMessage(to, [buildFlexRoundPairs(pageTitle, chunks[i])]);
    }
  } catch (err) {
    console.error('Flex ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô, fallback ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤:', err?.response?.data || err);
    const text = [title, ...lines].join('\n');
    await safePush(to, { type: 'text', text });
  }
}

// ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ñ‡∏π‡πà‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà (Pools)
async function announcePoolsRound(gid, room, headText) {
  const lines = [];
  for (const k of POOLS) {
    if (!room.bracket.pools[k].length) continue;
    lines.push(`‡∏™‡∏≤‡∏¢ ${k}`);
    room.bracket.pools[k].forEach((m, i) =>
      lines.push(`  Match ${i + 1}: ${pretty(room, m.a)} vs ${pretty(room, m.b)}`));
  }

  await tryPushFlexOrText(gid, headText, lines.length ? lines : ['(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ)']);

  // ‡∏™‡πà‡∏á DM ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏±‡∏î
  for (const k of POOLS) {
    for (const m of room.bracket.pools[k]) {
      for (const uid of [m.a, m.b]) {
        if (!uid) continue;
        userToGroup.set(uid, gid);
        await safePush(uid, [{
          type: 'text',
          text: `üìù ‡∏£‡∏≠‡∏ö‡∏™‡∏≤‡∏¢ ${k} ‚Äî ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏±‡∏î (rock/paper/scissors)`,
          quickReply: qr()
        }]);
      }
    }
  }
}


// ========== ‡πÅ‡∏Å‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô switch(action): case 'close' ==========

case 'close': {
  if (room.phase !== 'register') {
    await safeReply(e.replyToken, { type: 'text', text: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£' });
    break;
  }
  if (room.players.size < 2) {
    await safeReply(e.replyToken, { type: 'text', text: '‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏Ñ‡∏ô' });
    break;
  }

  // ‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà
  const ids = [...room.players.keys()];
  if (ids.length % 2 === 1) room.bracket.waitingOdd = ids.pop();
  room.bracket.pools = seedPoolsFrom(room, ids);
  room.bracket.round = 1;
  room.phase = 'playing';
  room.stage = 'pools';

  // ‚úÖ ‡∏™‡πà‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡∏Å‡∏±‡∏ô Flex ‡∏•‡πâ‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏á‡∏µ‡∏¢‡∏ö)
  await safePush(gid, {
    type: 'text',
    text: `üì£ Match ${room.bracket.round} ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß (‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ${room.players.size})`
  });

  // ‚úÖ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏£‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Flex (‡∏°‡∏µ fallback ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß)
  await announcePoolsRound(gid, room, `üì£ Match ${room.bracket.round} ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß (‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ${room.players.size})`);
  break;
}
