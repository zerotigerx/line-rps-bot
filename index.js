// index.js ‚Äî Janken Tournament (full: hero-image + queue/retry + position matches)
// Ready to deploy on Render/Node (Express + @line/bot-sdk)
// ------------------------------------------------------
// ‚úÖ Requirements covered
// - Multi-room safe: every postback encodes groupId
// - Announcement text per spec; add group name; Flex hero (no external image)
// - Admin-only: only opener can close/reset
// - 20 players max; odd count ‚Üí auto add BOT; human always wins vs BOT; BOT ranks last
// - Flex menus in group; DM shows group name; praise/tease copy randomized
// - Queue + retry + staggered push to avoid 400/429 bursts
// - Main tournament (pools‚Üícross) + Position Matches (3‚Äì4, 5‚Äì8, 9‚Äì16) until full ranking
// - Safe fallbacks when Flex/Push fails
// ------------------------------------------------------

import 'dotenv/config'
import express from 'express'
import { middleware, Client } from '@line/bot-sdk'

/* ========== LINE CONFIG ========== */
const config = {
  channelSecret: process.env.LINE_CHANNEL_SECRET,
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
}
if (!config.channelSecret || !config.channelAccessToken) {
  console.error('‚ùå Missing LINE credentials');
  process.exit(1)
}

/* ========== APP BOOT ========== */
const app = express()
const client = new Client(config)
const PORT = process.env.PORT || 3000

app.get('/', (_req, res) => res.send('‚úÖ Janken Tournament running'))
app.post('/webhook', middleware(config), async (req, res) => {
  try {
    for (const ev of (req.body?.events || [])) await handleEvent(ev)
    res.sendStatus(200)
  } catch (e) {
    console.error('Webhook error:', e?.response?.data || e?.message || e)
    res.sendStatus(200)
  }
})
app.listen(PORT, () => console.log(`üöÄ Server on ${PORT}`))

/* ========== GLOBAL/STATE ========== */
const HANDS = ['rock', 'paper', 'scissors']
const EMOJI = { rock: '‚úä', paper: '‚úã', scissors: '‚úåÔ∏è' }
const POOLS = ['A', 'B', 'C', 'D']

const BOT_UID = 'BOT:engine'
const BOT_NAME = 'BOT ü§ñ'
const isBot = (id) => id === BOT_UID

function isRealUserId(id) {
  return typeof id === 'string' && id.startsWith('U')
}

const rooms = new Map() // groupId -> room state
const groupNameCache = new Map()

const nowTH = () => new Date().toLocaleString('th-TH', { hour12: false })
const sleep = (ms) => new Promise((r) => setTimeout(r, ms))
const shuffle = (a) => {
  const x = [...a]
  for (let i = x.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1))
    ;[x[i], x[j]] = [x[j], x[i]]
  }
  return x
}
const pretty = (room, uid) => (uid ? (room.players.get(uid)?.name || '(?)') : 'Bot');

const judge = (a, b, aUid = null, bUid = null) => {
  // Human vs BOT: human wins silently
  if (isBot(aUid) && !isBot(bUid)) return 'B'
  if (!isBot(aUid) && isBot(bUid)) return 'A'
  if (!a || !b) return a ? 'A' : 'B'
  if (a === b) return 'DRAW'
  const beats = { rock: 'scissors', paper: 'rock', scissors: 'paper' }
  return beats[a] === b ? 'A' : 'B'
}

async function groupName(gid) {
  if (groupNameCache.has(gid)) return groupNameCache.get(gid)
  try {
    const s = await client.getGroupSummary(gid)
    if (s?.groupName) {
      groupNameCache.set(gid, s.groupName)
      return s.groupName
    }
  } catch {}
  return '(‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)'
}

/* ========== SAFE PUSH/REPLY with queue+retry ========== */
const MAX_RETRY = 4
const BASE_DELAY = 350 // ms between pushes to reduce 400/429

async function pushWithRetry(to, messages, attempt = 1) {
  try {
    await client.pushMessage(to, Array.isArray(messages) ? messages : [messages])
  } catch (e) {
    const status = e?.status || e?.response?.status
    const recoverable = status === 400 || status === 429 || status === 500 || status === 503
    if (recoverable && attempt < MAX_RETRY) {
      const backoff = Math.min(2000, BASE_DELAY * attempt * 2)
      console.warn(`[push#${attempt}] status=${status} ‚Üí retry in ${backoff}ms`)
      await sleep(backoff)
      return pushWithRetry(to, messages, attempt + 1)
    }
    console.error('[push-final] status=' + status, e?.response?.data || e)
    throw e
  }
}
async function replyWithRetry(token, messages, attempt = 1) {
  try {
    await client.replyMessage(token, Array.isArray(messages) ? messages : [messages])
  } catch (e) {
    const status = e?.status || e?.response?.status
    const recoverable = status === 400 || status === 429 || status === 500 || status === 503
    if (recoverable && attempt < MAX_RETRY) {
      const backoff = Math.min(2000, BASE_DELAY * attempt * 2)
      console.warn(`[reply#${attempt}] status=${status} ‚Üí retry in ${backoff}ms`)
      await sleep(backoff)
      return replyWithRetry(token, messages, attempt + 1)
    }
    console.error('[reply-final] status=' + status, e?.response?.data || e)
    throw e
  }
}

async function safePush(to, msg) {
  try {
    // LINE SDK ‡∏£‡∏±‡∏ö object ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß ‡∏´‡∏£‡∏∑‡∏≠ array (‚â§ 5 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)
    await client.pushMessage(to, msg);
  } catch (e) {
    const code = e?.response?.status;
    const data = e?.response?.data;   // <<<<< ‡∏Ç‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡∏à‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏
    console.error('PUSH_ERROR', { to, code, data, sample: JSON.stringify(msg).slice(0, 400) });
    throw e;
  }
}
async function safeReply(token, messages) {
  try { await replyWithRetry(token, messages) } catch {}
}

// push many users with stagger
async function pushBulkStagger(recipients, builder, gap = BASE_DELAY, gid = null, room = null) {
  const targets = (recipients || []).filter(isRealUserId);   // <<<< ‡∏Å‡∏£‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
  for (const uid of targets) {
    try {
      await safePush(uid, builder(uid));
    } catch (e) {
      // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á DM ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏µ‡∏ö‡∏±‡∏Å)
      const code = e?.response?.status;
      if (gid && code) {
        await safePush(gid, { type: 'text', text: `‚ùóÔ∏è‡∏™‡πà‡∏á DM ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ö‡∏≤‡∏á‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (code ${code})` });
      }
    }
    await sleep(gap);
  }
}

/* ========== ROOM INITIALIZER ========== */
function ensureRoom(gid) {
  if (!rooms.has(gid)) {
    rooms.set(gid, {
      admin: null,
      phase: 'idle', // idle | register | playing | finished
      stage: 'pools', // pools | cross | finished
      players: new Map(), // userId -> { name, isBot? }
      bracket: {
        round: 0,
        pools: { A: [], B: [], C: [], D: [] }, // match: {a,b,state,moves,winner,loser}
        cross: [],
        waitingOdd: null,
      },
      // ranking helpers
      rankOut: [],                // full ordered ranking (1..n) when finished
      rankBuckets: { final: [], semi: [], quarter: [], r16: [] },
      // position matches module
      position: {
        active: false,
        third: null,
        fiveToEight: null,
        nineToSixteen: null,
        labels: {},
      },
    })
  }
  return rooms.get(gid)
}

/* ========== FLEX / UI ========== */
function menuFlex() {
  return {
    type: 'flex',
    altText: 'Janken Menu',
    contents: {
      type: 'bubble',
      header: { type: 'box', layout: 'vertical', contents: [
        { type: 'text', text: 'üéå Janken Tournament', weight: 'bold', size: 'lg' },
      ]},
      body: { type: 'box', layout: 'vertical', contents: [
        { type: 'button', style: 'primary',   action: { type: 'message', label: 'Join',   text: 'janken join' } },
        { type: 'button', style: 'secondary', action: { type: 'message', label: 'Close',  text: 'janken close' } },
        { type: 'button', style: 'secondary', action: { type: 'message', label: 'Status', text: 'janken status' } },
        { type: 'button', style: 'secondary', action: { type: 'message', label: 'Reset',  text: 'janken reset' } },
      ]},
    }
  }
}

function openBannerFlex(group) {
  return {
    type: 'flex', altText: 'JANKEN TOURNAMENT ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß!',
    contents: {
      type: 'bubble',
      hero: { type: 'box', layout: 'vertical', backgroundColor: '#111', contents: [
        { type: 'text', text: 'JANKEN', weight: 'bold', size: '3xl', color: '#FFD54F', align: 'center' },
        { type: 'text', text: 'TOURNAMENT', weight: 'bold', size: 'xl', color: '#FFFFFF', align: 'center' },
        { type: 'text', text: `‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Äú${group}‚Äù`, size: 'sm', color: '#BDBDBD', align: 'center', margin: 'sm' },
      ], paddingAll: '24px', cornerRadius: 'md' },
      body: { type: 'box', layout: 'vertical', spacing: 'md', contents: [
        { type: 'text', text: '‡πÉ‡∏Ñ‡∏£‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ä‡∏°‡∏õ‡πå‡∏™‡∏≤‡∏¢‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ üèÜ', wrap: true },
        { type: 'box', layout: 'vertical', backgroundColor: '#F5F5F5', cornerRadius: 'md', paddingAll: '12px', contents: [
          { type: 'text', text: '‡∏Å‡∏î Join ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô', size: 'sm', color: '#666' },
          { type: 'text', text: '‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 20 ‡∏Ñ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‚ÄºÔ∏è', size: 'sm', color: '#666', margin: 'sm' },
          { type: 'text', text: '(‚è≥ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå "janken close" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Ç‡πà‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!)', size: 'xs', color: '#999', margin: 'sm' },
        ] },
      ]},
      footer: { type: 'box', layout: 'vertical', spacing: 'sm', contents: [
        { type: 'button', style: 'primary', color: '#4CAF50', action: { type: 'message', label: 'Join', text: 'janken join' } },
      ]}
    }
  }
}

function buildFlexRoundPairs(title, lines) {
  return {
    type: 'flex', altText: title,
    contents: {
      type: 'bubble',
      header: { type: 'box', layout: 'vertical', contents: [
        { type: 'text', text: title, weight: 'bold', size: 'lg' },
        { type: 'text', text: nowTH(), size: 'xs', color: '#999' },
      ]},
      body: { type: 'box', layout: 'vertical', spacing: 'sm', contents: lines.map(t => ({ type: 'text', text: t, wrap: true })) }
    }
  }
}

async function tryPushFlexOrText(to, title, lines) {
  const MAX = 10
  const chunks = []
  for (let i = 0; i < lines.length; i += MAX) chunks.push(lines.slice(i, i + MAX))
  try {
    if (!chunks.length) { await safePush(to, { type: 'text', text: title + '\n(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ)' }); return }
    for (let i = 0; i < chunks.length; i++) {
      const head = chunks.length > 1 ? `${title} (‡∏´‡∏ô‡πâ‡∏≤ ${i + 1}/${chunks.length})` : title
      await pushWithRetry(to, [buildFlexRoundPairs(head, chunks[i])])
      await sleep(120)
    }
  } catch (e) {
    await safePush(to, { type: 'text', text: [title, ...lines].join('\n') })
  }
}

/* ====== DM buttons with POSTBACK (multi-room safe) ====== */
const matchKey = (gid, stage, pool, idx) => `${gid}|${stage}|${pool ?? '-' }|${idx}`
function makePostback(gid, stage, pool, idx, move) {
  const map = { rock: ['‚úä Rock', 'Rock'], paper: ['‚úã Paper', 'Paper'], scissors: ['‚úå Scissors', 'Scissors'] }
  const [label, displayText] = map[move]
  return {
    type: 'postback',
    label,
    data: `move=${move}&gid=${gid}&stage=${stage}&pool=${pool}&idx=${idx}`,
    displayText
  }
}

const qrPostback = (gid, stage, pool, idx) => ({
  items: HANDS.map(h => ({ type: 'action', action: makePostback(gid, stage, pool, idx, h) }))
})

function choiceFlexPostback(title, gid, stage, pool, idx) {
  return {
    type: 'flex',
    altText: title || '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏±‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏ß‡∏•',
    contents: {
      type: 'bubble',
      header: { type: 'box', layout: 'vertical', contents: [{ type: 'text', text: title, weight: 'bold', size: 'lg' }] },
      body: {
        type: 'box',
        layout: 'vertical',
        spacing: 'md',
        contents: [
          { type: 'button', style: 'primary', action: makePostback(gid, stage, pool, idx, 'rock'),     color: '#ff6666', height: 'sm' },
          { type: 'button', style: 'primary', action: makePostback(gid, stage, pool, idx, 'paper'),    color: '#66ccff', height: 'sm' },
          { type: 'button', style: 'primary', action: makePostback(gid, stage, pool, idx, 'scissors'), color: '#99cc66', height: 'sm' }
        ]
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        contents: [{ type: 'text', text: '(‡πÅ‡∏ï‡∏∞‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏±‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢)', size: 'xs', color: '#999' }]
      }
    }
  }
}

/* ========== ANNOUNCE HELPERS (Main bracket) ========== */
const toPairs = ids => { const out = []; for (let i = 0; i < ids.length; i += 2) out.push([ids[i] || null, ids[i + 1] || null]); return out }
// ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏•‡∏á‡∏™‡∏≤‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏™‡∏≤‡∏¢)
// ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏Ñ‡∏™ 2 ‡∏Ñ‡∏ô‡∏ñ‡∏π‡∏Å‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏ô‡∏•‡∏∞‡∏™‡∏≤‡∏¢‡∏à‡∏ô‡πÑ‡∏î‡πâ‡∏ö‡∏≤‡∏¢
function seedPoolsFrom(ids) {
  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÇ‡∏Ñ‡∏£‡∏á 4 ‡∏™‡∏≤‡∏¢‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô ‡∏Å‡∏±‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡πâ‡∏≤‡∏á POOLS ‡∏Ñ‡∏£‡∏ö‡∏ä‡∏∏‡∏î
  const pools = { A: [], B: [], C: [], D: [] };

  // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á = min(4, floor(n/2)) ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1
  const n = ids.length;
  const poolCount = Math.max(1, Math.min(4, Math.floor(n / 2))) || 1;
  const keys = POOLS.slice(0, poolCount);

  const shuffled = shuffle(ids);
  let i = 0;
  for (const id of shuffled) {
    pools[keys[i % keys.length]].push(id);
    i++;
  }

  // ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏≤‡∏¢ (‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ [uid, null] = ‡∏ö‡∏≤‡∏¢)
  for (const k of POOLS) {
    const pairs = toPairs(pools[k]);
    pools[k] = pairs.map(([a, b]) => ({
      a, b, state: 'pending', moves: {}, winner: null, loser: null
    }));
  }
  return pools;
}
const allPoolsDone = pools => POOLS.every(k => pools[k].every(m => m.state === 'done'))
const poolWinners = pools => POOLS.reduce((acc, k) => (acc[k] = pools[k].map(m => m.winner).filter(Boolean), acc), {})

const PRAISES = [
  (t) => `‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î! ${t} üòé`,
  (t) => `‡∏°‡∏µ‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏ä‡∏¥‡∏á ${t} ‚ú®`,
  (t) => `‡πÇ‡∏Ñ‡∏ï‡∏£‡∏Ñ‡∏π‡∏• ${t} üî•`,
  (t) => `‡∏ü‡∏µ‡∏•‡∏•‡∏¥‡πà‡∏á‡∏î‡∏µ ${t} ‚úÖ`,
]
const complimentForChoice = () => PRAISES[Math.floor(Math.random() * PRAISES.length)]('‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å')

async function announcePoolsRound(gid, room, title) {
  const lines = []
  for (const k of POOLS) {
    if (!room.bracket.pools[k].length) continue
    lines.push(`‡∏™‡∏≤‡∏¢ ${k}`)
    room.bracket.pools[k].forEach((m, i) => lines.push(`  Match ${i + 1}: ${pretty(room, m.a)} vs ${pretty(room, m.b)}`))
  }
  await tryPushFlexOrText(gid, title, lines)

  const gName = await groupName(gid)
  for (const k of POOLS) {
    for (let i = 0; i < room.bracket.pools[k].length; i++) {
      const m = room.bracket.pools[k][i]
      const targets = [m.a, m.b].filter(isRealUserId)
      await pushBulkStagger(targets, () => ([
        { type: 'text', text: `üìù ‡∏£‡∏≠‡∏ö‡∏™‡∏≤‡∏¢ ${k} ‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡∏ß‡∏£‡πå‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Äú${gName}‚Äù ‚Äî ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏±‡∏î (rock/paper/scissors)`, quickReply: qrPostback(gid, 'pools', k, i) },
        choiceFlexPostback('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏±‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ', gid, 'pools', k, i),
        { type: 'text', text: `${complimentForChoice()} ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡∏•‡∏∏‡πâ‡∏ô‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Äú${gName}‚Äù` },
      ]))
    }
  }
}

async function announceCrossRound(gid, room, title) {
  const lines = room.bracket.cross.map((m, i) => `Match ${i + 1}: ${pretty(room, m.a)} vs ${pretty(room, m.b)}`)
  await tryPushFlexOrText(gid, title, lines)

  const gName = await groupName(gid)
  for (let i = 0; i < room.bracket.cross.length; i++) {
    const m = room.bracket.cross[i]
    const targets = [m.a, m.b].filter(Boolean)
    await pushBulkStagger(targets, () => ([
      { type: 'text', text: `üìù ${title} ‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡∏ß‡∏£‡πå‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Äú${gName}‚Äù ‚Äî ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏±‡∏î (rock/paper/scissors)`, quickReply: qrPostback(gid, 'cross', null, i) },
      choiceFlexPostback('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏±‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ', gid, 'cross', null, i),
      { type: 'text', text: `${complimentForChoice()} ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏£‡∏≠‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Äú${gName}‚Äù ‡πÄ‡∏•‡∏¢!` },
    ]))
  }
}

/* ========== FLEX ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á (‡∏î‡∏π‡∏î‡∏µ + fallback) ========== */
function flexMatchResult(title, aName, aH, bName, bH, winName) {
  return {
    type: 'flex', altText: `${title}: ${winName}`,
    contents: {
      type: 'bubble',
      header: { type: 'box', layout: 'vertical', contents: [{ type: 'text', text: title, weight: 'bold', size: 'lg' }] },
      body: {
        type: 'box', layout: 'vertical', spacing: 'sm', contents: [
          { type: 'box', layout: 'baseline', contents: [
            { type: 'text', text: aName, size: 'md', flex: 5, wrap: true },
            { type: 'text', text: EMOJI[aH] || '', size: 'lg', flex: 1, align: 'end' },
          ]},
          { type: 'box', layout: 'baseline', contents: [
            { type: 'text', text: bName, size: 'md', flex: 5, wrap: true },
            { type: 'text', text: EMOJI[bH] || '', size: 'lg', flex: 1, align: 'end' },
          ]},
          { type: 'separator' },
          { type: 'text', text: `‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞: ${winName}`, weight: 'bold', color: '#2E7D32' },
        ]
      }
    }
  }
}

/* ========== POSITION MATCHES MODULE ========== */
function trackLoser(room, uid, stageHint) {
  if (!uid) return
  if (uid === BOT_UID) return // BOT ‡πÑ‡∏õ‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î
  const b = room.rankBuckets
  if (stageHint === 'final') b.final.push(uid)
  else if (stageHint === 'semi') b.semi.push(uid)
  else if (stageHint === 'quarter') b.quarter.push(uid)
  else if (stageHint === 'r16') b.r16.push(uid)
}

function pairUp(ids) { const out = []; for (let i = 0; i < ids.length; i += 2) out.push([ids[i] || null, ids[i + 1] || null]); return out }
function buildMiniBracket(ids) {
  const rounds = []
  const first = pairUp(ids).map(([a, b]) => ({ a, b, state: 'pending', moves: {}, winner: null, loser: null }))
  rounds.unshift(first)
  return { rounds }
}

async function startPositionMatches(gid, room) {
  const semi = [...room.rankBuckets.semi]
  const qf = [...room.rankBuckets.quarter]
  const r16 = [...room.rankBuckets.r16]

  room.position.active = true
  room.position.labels = {}

  if (semi.length === 2) room.position.third = buildMiniBracket(semi)
  if (qf.length === 4) room.position.fiveToEight = buildMiniBracket(qf)
  if (r16.length === 8) room.position.nineToSixteen = buildMiniBracket(r16)

  await announcePositionRound(gid, room)
}

async function announcePositionRound(gid, room) {
  const gName = await groupName(gid)
  const lines = []
  const pushBlock = async (matches, titlePrefix, stageKey) => {
    if (!matches) return
    const round = matches.rounds[0]
    if (!round) return
    lines.push(`${titlePrefix}`)
    round.forEach((m, i) => lines.push(`  Match ${i + 1}: ${pretty(room, m.a)} vs ${pretty(room, m.b)}`))
    for (let i = 0; i < round.length; i++) {
      const m = round[i]
      const targets = [m.a, m.b].filter((u) => u && u !== BOT_UID)
      await pushBulkStagger(targets, () => ([
        { type: 'text', text: `üìù ‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏≠‡∏≠‡∏ü‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö (${titlePrefix}) ‚Äì ‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Äú${gName}‚Äù ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì` },
        choiceFlexPostback('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏±‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏≠‡∏≠‡∏ü', gid, `pos:${stageKey}`, null, i),
        { type: 'text', text: `${complimentForChoice()} ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏õ‡∏•‡∏∏‡πâ‡∏ô‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Äú${gName}‚Äù` },
      ]))
    }
  }

  await pushBlock(room.position.third, '‡∏ä‡∏¥‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 3‚Äì4', 'third')
  await pushBlock(room.position.fiveToEight, '‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 5‚Äì8', '5-8')
  await pushBlock(room.position.nineToSixteen, '‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 9‚Äì16', '9-16')

  if (lines.length) await tryPushFlexOrText(gid, 'üì£ ‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏≠‡∏≠‡∏ü‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß', lines)
}

async function handlePositionPostback(gid, room, key, idx, hand, uid, replyToken) {
  const block = key === 'third' ? room.position.third
    : key === '5-8' ? room.position.fiveToEight
      : key === '9-16' ? room.position.nineToSixteen : null
  if (!block) return
  const round = block.rounds[0]
  const m = round?.[idx]
  if (!m) return
  if (![m.a, m.b].includes(uid)) return

  m.moves[uid] = hand
  const gName = await groupName(gid)
  await safeReply(replyToken, { type: 'text', text: `${complimentForChoice()} (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ${hand.toUpperCase()} ${EMOJI[hand]})\n‡∏£‡∏≠‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Äú${gName}‚Äù` })

  const aH = m.moves[m.a], bH = m.moves[m.b]
  if (m.a && !m.b) { m.winner = m.a; m.loser = null; m.state = 'done' }
  else if (m.b && !m.a) { m.winner = m.b; m.loser = null; m.state = 'done' }
  else if (aH && bH) {
    const r = judge(aH, bH, m.a, m.b)
    if (r === 'DRAW') {
      m.moves = {}
      for (const u of [m.a, m.b]) if (u && u !== BOT_UID) await safePush(u, [
        { type: 'text', text: `‡πÄ‡∏™‡∏°‡∏≠ ‚Äì ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏≠‡∏≠‡∏ü ${key})` },
        choiceFlexPostback('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', gid, `pos:${key}`, null, idx),
      ])
      return
    }
    m.winner = r === 'A' ? m.a : m.b
    m.loser = r === 'A' ? m.b : m.a
    m.state = 'done'
    try {
      await client.pushMessage(gid, [flexMatchResult(`‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏≠‡∏≠‡∏ü ${key}`, pretty(room, m.a), aH, pretty(room, m.b), bH, pretty(room, m.winner))])
    } catch {
      await safePush(gid, { type: 'text', text: `‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏≠‡∏≠‡∏ü ${key}\n${pretty(room, m.a)} ${EMOJI[aH] || ''} vs ${pretty(room, m.b)} ${EMOJI[bH] || ''}\n‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞: ${pretty(room, m.winner)}` })
    }
  } else return

  await progressPositionBlock(gid, room, key)
}

async function progressPositionBlock(gid, room, key) {
  const block = key === 'third' ? room.position.third
    : key === '5-8' ? room.position.fiveToEight
      : key === '9-16' ? room.position.nineToSixteen : null
  if (!block) return
  const cur = block.rounds[0]
  if (!cur.every(m => m.state === 'done')) return

  const winners = cur.map(m => m.winner).filter(Boolean)
  const losers = cur.map(m => m.loser).filter(Boolean)

  const pushRanks = (ids, start) => {
    ids.forEach((u, i) => { if (u && !room.rankOut.includes(u)) room.rankOut.splice(start - 1 + i, 0, u) })
  }

  if (key === 'third') {
    pushRanks([winners[0], losers[0]], 3)
    room.position.third = null
  } else if (key === '5-8') {
    if (block.rounds.length === 1) {
      const next = [
        { a: winners[0] || null, b: winners[1] || null, state: 'pending', moves: {}, winner: null, loser: null },
        { a: losers[0] || null, b: losers[1] || null, state: 'pending', moves: {}, winner: null, loser: null },
      ]
      block.rounds.unshift(next)
      await announcePositionRound(gid, room)
      return
    } else {
      const final5_6 = block.rounds[0][0]
      const final7_8 = block.rounds[0][1]
      const r5 = final5_6.winner, r6 = final5_6.loser
      const r7 = final7_8.winner, r8 = final7_8.loser
      pushRanks([r5, r6, r7, r8], 5)
      room.position.fiveToEight = null
    }
  } else if (key === '9-16') {
    if (block.rounds.length === 1) {
      const next = [
        { a: winners[0] || null, b: winners[1] || null, state: 'pending', moves: {}, winner: null, loser: null }, // 9/10
        { a: winners[2] || null, b: winners[3] || null, state: 'pending', moves: {}, winner: null, loser: null }, // 11/12
        { a: losers[0] || null, b: losers[1] || null, state: 'pending', moves: {}, winner: null, loser: null },   // 13/14
        { a: losers[2] || null, b: losers[3] || null, state: 'pending', moves: {}, winner: null, loser: null },   // 15/16
      ]
      block.rounds.unshift(next)
      await announcePositionRound(gid, room)
      return
    } else {
      const r = block.rounds[0]
      const order = [r[0].winner, r[0].loser, r[1].winner, r[1].loser, r[2].winner, r[2].loser, r[3].winner, r[3].loser]
      pushRanks(order, 9)
      room.position.nineToSixteen = null
    }
  }

  if (!room.position.third && !room.position.fiveToEight && !room.position.nineToSixteen) {
    if (!room.rankOut.includes(BOT_UID) && room.players.has(BOT_UID)) room.rankOut.push(BOT_UID)

    const lines = []
    lines.push('üèÅ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡∏ß‡∏£‡πå‡∏ô‡∏µ‡πâ')
    const name = (u) => (u === BOT_UID ? BOT_NAME : pretty(room, u))
    room.rankOut.forEach((u, i) => lines.push(`${i + 1}. ${name(u)}`))
    await tryPushFlexOrText(gid, '‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', lines)

    room.phase = 'finished'; room.stage = 'finished'
  }
}

/* ========== EVENT HANDLER ========== */
async function handleEvent(e) {
  // --- POSTBACK (DM) ---
  if (e.type === 'postback' && typeof e.postback?.data === 'string') {
    const data = e.postback.data.split('|') // jg|<gid>|<stage>|<pool>|<idx>|<hand>
    if (data[0] === 'jg') {
      const gid = data[1]
      const stage = data[2] // 'pools' | 'cross' | 'pos:<key>'
      const pool = data[3] === '-' ? null : data[3]
      const idx = Number(data[4])
      const hand = data[5]
      const uid = e.source.userId
      if (!rooms.has(gid)) return
      const room = rooms.get(gid)

      if (stage?.startsWith('pos:')) {
        const key = stage.split(':')[1]
        await handlePositionPostback(gid, room, key, idx, hand, uid, e.replyToken)
        return
      }

      if (stage === 'pools') {
        const m = room.bracket.pools[pool]?.[idx]
        if (m?.state === 'pending' && (m.a === uid || m.b === uid)) {
          m.moves[uid] = hand
          const gName = await groupName(gid)
          await safeReply(e.replyToken, { type: 'text', text: `${complimentForChoice()} (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ${hand.toUpperCase()} ${EMOJI[hand]})\n‡∏£‡∏≠‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏•‡∏∏‡πâ‡∏ô‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Äú${gName}‚Äù` })
          await tryCloseMatch_Pool(gid, room, pool, idx)
        }
      } else if (stage === 'cross') {
        const m = room.bracket.cross?.[idx]
        if (m?.state === 'pending' && (m.a === uid || m.b === uid)) {
          m.moves[uid] = hand
          const gName = await groupName(gid)
          await safeReply(e.replyToken, { type: 'text', text: `${complimentForChoice()} (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ${hand.toUpperCase()} ${EMOJI[hand]})\n‡∏£‡∏≠‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏•‡∏∏‡πâ‡∏ô‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Äú${gName}‚Äù` })
          await tryCloseMatch_Cross(gid, room, idx)
        }
      }
    }
    return
  }

  // --- DM text fallback ---
  if (e.type === 'message' && e.message.type === 'text' && e.source.type === 'user') {
    const t = (e.message.text || '').trim().toLowerCase()
    if (!HANDS.includes(t)) {
      await safeReply(e.replyToken, { type: 'text', text: '‡πÅ‡∏ï‡∏∞‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏±‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ (‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå rock / paper / scissors)' })
      return
    }
    await safeReply(e.replyToken, { type: 'text', text: '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏±‡∏ö‡∏™‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ó‡∏±‡∏ß‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏ï‡∏∞‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÉ‡∏´‡πâ (‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß) ‡∏Ñ‡∏£‡∏±‡∏ö üôè' })
    return
  }

  // --- Group commands ---
  if (e.type !== 'message' || e.message.type !== 'text') return
  if (!(e.source.type === 'group' || e.source.type === 'supergroup')) return

  const gid = e.source.groupId
  const text = (e.message.text || '').trim()
  const [cmd, sub, ...rest] = text.split(/\s+/)
  const c0 = (cmd || '').toLowerCase()
  if (c0 === 'menu') { await safeReply(e.replyToken, menuFlex()); return }
  if (c0 !== 'janken' && c0 !== 'rps') return

  const room = ensureRoom(gid)
  const gName = await groupName(gid)

  let displayName = 'Player'
  try { const prof = await client.getGroupMemberProfile(gid, e.source.userId); if (prof?.displayName) displayName = prof.displayName } catch {}

  switch ((sub || '').toLowerCase()) {
    case 'open': {
      room.admin = e.source.userId
      room.phase = 'register'
      room.stage = 'pools'
      room.players = new Map()
      room.bracket = { round: 0, pools: { A: [], B: [], C: [], D: [] }, cross: [], waitingOdd: null }
      room.rankOut = []
      room.rankBuckets = { final: [], semi: [], quarter: [], r16: [] }
      room.position = { active: false, third: null, fiveToEight: null, nineToSixteen: null, labels: {} }

      const announce = [
        `üéå‚ú® JANKEN TOURNAMENT ‡πÄ‡∏õ‡∏¥‡∏î‡∏â‡∏≤‡∏Å‡πÅ‡∏•‡πâ‡∏ß!! ‚ú®üéå (‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Äú${gName}‚Äù)`,
        '',
        '‡πÉ‡∏Ñ‡∏£‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ä‡∏°‡∏õ‡πå‡∏™‡∏≤‡∏¢‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ üèÜ',
        '',
        '‡∏Å‡∏î Join ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô',
        '‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 20 ‡∏Ñ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‚ÄºÔ∏è',
        '',
        '(‚è≥ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå "janken close" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Ç‡πà‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!)',
      ].join('\n')

      await sleep(350)
      await safePush(gid, { type: 'text', text: announce })
      await sleep(150)
      await safePush(gid, openBannerFlex(gName))
      await sleep(150)
      await safeReply(e.replyToken, [menuFlex(), { type: 'text', text: 'üü¢ ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏•‡πâ‡∏ß (‡∏û‡∏¥‡∏°‡∏û‡πå janken join ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°)' }])
      break
    }

    case 'join': {
      if (room.phase !== 'register') { await safeReply(e.replyToken, { type: 'text', text: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£' }); break }
      if (room.players.size >= 20) { await safeReply(e.replyToken, { type: 'text', text: '‚ùå ‡∏ó‡∏±‡∏ß‡∏£‡πå‡πÄ‡∏ï‡πá‡∏° (20 ‡∏Ñ‡∏ô)' }); break }
      const name = (rest.join(' ') || displayName).slice(0, 40)
      room.players.set(e.source.userId, { name })
      await safeReply(e.replyToken, { type: 'text', text: `‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß: ${name} (‡∏£‡∏ß‡∏° ${room.players.size}/20)` })
      break
    }

    case 'close': {
      if (room.admin !== e.source.userId) { await safeReply(e.replyToken, { type: 'text', text: '‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏õ‡∏¥‡∏î (‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ üôè' }); break }
      if (room.phase !== 'register') { await safeReply(e.replyToken, { type: 'text', text: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£' }); break }
      if (room.players.size < 2) { await safeReply(e.replyToken, { type: 'text', text: '‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏Ñ‡∏ô' }); break }

      const ids = [...room.players.keys()]
      if (ids.length % 2 === 1) {
        room.players.set(BOT_UID, { name: BOT_NAME, isBot: true })
        ids.push(BOT_UID)
      }

      function isRealUserId(id) {
        // LINE userId ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "U"
        return typeof id === 'string' && id.startsWith('U');
      }

      room.bracket.pools = seedPoolsFrom(ids)
      room.bracket.round = 1
      room.phase = 'playing'
      room.stage = 'pools'

      await safePush(gid, { type: 'text', text: `üì£ Match ${room.bracket.round} ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß (‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ${room.players.size})` })
      await announcePoolsRound(gid, room, `üì£ Match ${room.bracket.round} ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß (‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ${room.players.size})`)
      await safePush(gid, { type: 'text', text: `üì© ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏•‡∏ô‡πå‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏±‡∏î‡∏î‡∏ß‡∏•‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Äú${gName}‚Äù)` })
      break
    }

    case 'status': {
      const head = room.phase === 'register' ? `üìù ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏≠‡∏¢‡∏π‡πà: ${room.players.size} ‡∏Ñ‡∏ô`
        : room.phase === 'playing' ? `üéÆ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Ç‡πà‡∏á ‚Äî ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${room.bracket.round} [${room.stage}]`
          : room.phase === 'finished' ? 'üèÅ ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß' : '‚Äî'
      await safeReply(e.replyToken, { type: 'text', text: head })
      break
    }

    case 'reset': {
      if (room.admin !== e.source.userId) { await safeReply(e.replyToken, { type: 'text', text: '‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÑ‡∏î‡πâ üôè' }); break }
      rooms.delete(gid)
      await safeReply(e.replyToken, { type: 'text', text: '‚ôªÔ∏è ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡πâ‡∏ß ‚Äî janken open ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà' })
      break
    }

    default: await safeReply(e.replyToken, menuFlex())
  }
}

/* ========== MAIN BRACKET RESOLUTION ========== */
async function tryCloseMatch_Pool(gid, room, k, idx) {
  const m = room.bracket.pools[k][idx]
  const aH = m.moves[m.a], bH = m.moves[m.b]

  if (m.a && !m.b) {
    m.winner = m.a; m.loser = null; m.state = 'done'
    await safePush(gid, { type: 'text', text: `‚úÖ ‡∏™‡∏≤‡∏¢ ${k} ‚Äî Match ${idx + 1}: ${pretty(room, m.a)} ‡πÑ‡∏î‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ö‡∏≤‡∏¢` })
  } else if (m.b && !m.a) {
    m.winner = m.b; m.loser = null; m.state = 'done'
    await safePush(gid, { type: 'text', text: `‚úÖ ‡∏™‡∏≤‡∏¢ ${k} ‚Äî Match ${idx + 1}: ${pretty(room, m.b)} ‡πÑ‡∏î‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ö‡∏≤‡∏¢` })
  } else if (aH && bH) {
    const r = judge(aH, bH, m.a, m.b)
    if (r === 'DRAW') {
      m.moves = {}
      const gName = await groupName(gid)
      for (const uid of [m.a, m.b]) if (uid) await safePush(uid, [
        { type: 'text', text: `‡πÄ‡∏™‡∏°‡∏≠ ‚Äî ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà (‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Äú${gName}‚Äù)`, quickReply: qrPostback(gid, 'pools', k, idx) },
        choiceFlexPostback('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', gid, 'pools', k, idx),
      ])
      return
    }
    m.winner = r === 'A' ? m.a : m.b; m.loser = r === 'A' ? m.b : m.a; m.state = 'done'
    try {
      await client.pushMessage(gid, [flexMatchResult(`‡∏™‡∏≤‡∏¢ ${k} ‚Äî Match ${idx + 1}`, pretty(room, m.a), aH, pretty(room, m.b), bH, pretty(room, m.winner))])
    } catch {
      await safePush(gid, { type: 'text', text: `‡∏™‡∏≤‡∏¢ ${k} ‚Äî Match ${idx + 1}\n${pretty(room, m.a)} ${EMOJI[aH]} vs ${pretty(room, m.b)} ${EMOJI[bH]}\n‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞: ${pretty(room, m.winner)}` })
    }
  } else return

  if (!allPoolsDone(room.bracket.pools)) return

  const winners = poolWinners(room.bracket.pools)
  const lines = []
  for (const kk of POOLS) if (winners[kk].length) lines.push(`‡∏™‡∏≤‡∏¢ ${kk}: ${winners[kk].map(u => pretty(room, u)).join(', ')}`)
  await tryPushFlexOrText(gid, '‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ', lines)

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏™‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏ß‡∏°‡∏™‡∏≤‡∏¢
  const eachPoolSingle = POOLS.every(kk => winners[kk].length <= 1)
  if (!eachPoolSingle) {
    const next = { A: [], B: [], C: [], D: [] }
    for (const kk of POOLS) {
      const ws = winners[kk]
      for (let i = 0; i < ws.length; i += 2) next[kk].push({ a: ws[i] || null, b: ws[i + 1] || null, state: 'pending', moves: {}, winner: null, loser: null })
    }
    room.bracket.pools = next
    room.bracket.round += 1
    await announcePoolsRound(gid, room, `üì£ ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${room.bracket.round}`)
    return
  }

  const champs = Object.values(winners).flat()
  if (champs.length === 1) {
    // ‡πÅ‡∏ä‡∏°‡∏õ‡πå‡πÄ‡∏•‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏™‡∏≤‡∏¢)
    const champion = champs[0]
    room.rankOut.push(champion)
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏≠‡∏≠‡∏ü‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    await startPositionMatches(gid, room)
    return
  }

  const ids = shuffle(champs)
  const cross = []
  for (let i = 0; i < ids.length; i += 2) cross.push({ a: ids[i] || null, b: ids[i + 1] || null, state: 'pending', moves: {}, winner: null, loser: null })
  room.stage = 'cross'
  room.bracket.cross = cross
  room.bracket.round += 1
  await announceCrossRound(gid, room, 'üèÅ ‡∏£‡∏≠‡∏ö‡∏£‡∏ß‡∏° (‡∏Ç‡πâ‡∏≤‡∏°‡∏™‡∏≤‡∏¢)')
}

async function tryCloseMatch_Cross(gid, room, idx) {
  const m = room.bracket.cross[idx]
  const aH = m.moves[m.a], bH = m.moves[m.b]

  if (m.a && !m.b) { m.winner = m.a; m.loser = null; m.state = 'done' }
  else if (m.b && !m.a) { m.winner = m.b; m.loser = null; m.state = 'done' }
  else if (aH && bH) {
    const r = judge(aH, bH, m.a, m.b)
    if (r === 'DRAW') {
      m.moves = {}
      const gName = await groupName(gid)
      for (const uid of [m.a, m.b]) if (uid) await safePush(uid, [
        { type: 'text', text: `‡πÄ‡∏™‡∏°‡∏≠ ‚Äî ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà (‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Äú${gName}‚Äù)`, quickReply: qrPostback(gid, 'cross', null, idx) },
        choiceFlexPostback('‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', gid, 'cross', null, idx),
      ])
      return
    }
    m.winner = r === 'A' ? m.a : m.b; m.loser = r === 'A' ? m.b : m.a; m.state = 'done'
    try {
      await client.pushMessage(gid, [flexMatchResult('‡∏ú‡∏•‡∏£‡∏≠‡∏ö‡∏£‡∏ß‡∏°', pretty(room, m.a), aH, pretty(room, m.b), bH, pretty(room, m.winner))])
    } catch {
      await safePush(gid, { type: 'text', text: `‡∏ú‡∏•‡∏£‡∏≠‡∏ö‡∏£‡∏ß‡∏°\n${pretty(room, m.a)} ${EMOJI[aH] || ''} vs ${pretty(room, m.b)} ${EMOJI[bH] || ''}\n‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞: ${pretty(room, m.winner)}` })
    }
  } else return

  const done = room.bracket.cross.every(x => x.state === 'done')
  if (!done) return

  const winners = room.bracket.cross.map(x => x.winner).filter(Boolean)
  const losers = room.bracket.cross.map(x => x.loser).filter(Boolean)

  if (winners.length === 1) {
    const champion = winners[0]
    if (!room.rankOut.includes(champion)) room.rankOut.push(champion)
    // ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏π‡πâ‡πÅ‡∏û‡πâ‡∏£‡∏≠‡∏ö‡∏ä‡∏¥‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏•‡∏á‡∏ñ‡∏±‡∏á final ‚Üí ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏≠‡∏≠‡∏ü 3‚Äì4
    if (losers.length === 1) trackLoser(room, losers[0], 'final')
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏¢‡πå‡∏≠‡∏≠‡∏ü‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    await startPositionMatches(gid, room)
    return
  }

  // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö: ‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÅ‡∏û‡πâ‡∏•‡∏á‡∏ñ‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤: winners.length*2 = ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ
  const size = winners.length * 2
  if (size === 4) { // ‡∏£‡∏≠‡∏ö‡∏£‡∏≠‡∏á (semi)
    losers.forEach(u => trackLoser(room, u, 'semi'))
  } else if (size === 8) { // quarter
    losers.forEach(u => trackLoser(room, u, 'quarter'))
  } else if (size === 16) { // r16
    losers.forEach(u => trackLoser(room, u, 'r16'))
  }

  const next = []
  for (let i = 0; i < winners.length; i += 2) next.push({ a: winners[i] || null, b: winners[i + 1] || null, state: 'pending', moves: {}, winner: null, loser: null })
  room.bracket.cross = next
  room.bracket.round += 1
  await announceCrossRound(gid, room, `üèÅ ‡∏£‡∏≠‡∏ö‡∏£‡∏ß‡∏° (‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${room.bracket.round})`)
}
