import 'dotenv/config';
import express from 'express';
import { middleware, Client } from '@line/bot-sdk';

const config = {
  channelSecret: process.env.LINE_CHANNEL_SECRET,
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
};

if (!config.channelSecret || !config.channelAccessToken) {
  console.error('‚ùå Missing LINE credentials');
  process.exit(1);
}

const app = express();
const client = new Client(config);

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));

app.post('/webhook', middleware(config), async (req, res) => {
  Promise.all(req.body.events.map(handleEvent)).then((result) => res.json(result));
});

// =========================== GAME STATE ===============================
const rooms = new Map();
const userToGroup = new Map();
const HANDS = ['rock', 'paper', 'scissors'];
const EMOJI = { rock: '‚úä', paper: '‚úã', scissors: '‚úåÔ∏è' };

// =========================== UTILITIES ================================
async function safePush(to, message) {
  try { await client.pushMessage(to, message); }
  catch (err) { console.error('Push error:', err.originalError?.response?.data || err); }
}
async function safeReply(token, message) {
  try { await client.replyMessage(token, message); }
  catch (err) { console.error('Reply error:', err.originalError?.response?.data || err); }
}

// =========================== FLEX MENU ================================
function menuFlex() {
  return {
    type: 'flex',
    altText: 'Janken Tournament Menu',
    contents: {
      type: 'bubble',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [{ type: 'text', text: 'Janken Tournament Menu', weight: 'bold', size: 'lg' }]
      },
      body: {
        type: 'box',
        layout: 'vertical',
        spacing: 'md',
        contents: [
          { type: 'button', style: 'primary', color: '#4CAF50', action: { type: 'message', label: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°', text: 'janken join' }},
          { type: 'button', style: 'secondary', color: '#FFB74D', action: { type: 'message', label: '‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£', text: 'janken close' }},
          { type: 'button', style: 'secondary', action: { type: 'message', label: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏Å‡∏°', text: 'janken reset' }}
        ]
      }
    }
  };
}

// =========================== FLEX OPEN BANNER ================================
function openBannerFlex() {
  return {
    type: 'flex',
    altText: 'JANKEN TOURNAMENT ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß!',
    contents: {
      type: 'bubble',
      hero: {
        type: 'box',
        layout: 'vertical',
        backgroundColor: '#111',
        contents: [
          { type: 'text', text: 'JANKEN', weight: 'bold', size: '3xl', color: '#FFD54F', align: 'center' },
          { type: 'text', text: 'TOURNAMENT', weight: 'bold', size: 'xl', color: '#FFFFFF', align: 'center' },
          { type: 'text', text: '‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏•‡πâ‡∏ß!', size: 'sm', color: '#BDBDBD', align: 'center', margin: 'sm' }
        ],
        paddingAll: '24px',
        cornerRadius: 'md'
      },
      body: {
        type: 'box',
        layout: 'vertical',
        spacing: 'md',
        contents: [
          { type: 'text', text: '‡πÉ‡∏Ñ‡∏£‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ä‡∏°‡∏õ‡πå‡∏™‡∏≤‡∏¢‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ?', wrap: true },
          {
            type: 'box',
            layout: 'vertical',
            backgroundColor: '#F5F5F5',
            cornerRadius: 'md',
            paddingAll: '12px',
            contents: [
              { type: 'text', text: '‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°', weight: 'bold' },
              { type: 'text', text: '‡∏û‡∏¥‡∏°‡∏û‡πå  janken join  ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ô‡∏µ‡πâ', size: 'sm', color: '#666666' },
              { type: 'text', text: '‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 20 ‡∏Ñ‡∏ô ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô', size: 'sm', color: '#666666', margin: 'sm' }
            ]
          }
        ]
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        spacing: 'sm',
        contents: [
          { type: 'button', style: 'primary', color: '#FFB74D', action: { type: 'message', label: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ', text: 'janken join' }},
          { type: 'button', style: 'secondary', action: { type: 'message', label: '‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π', text: 'menu' }}
        ]
      }
    }
  };
}

// =========================== HANDLE EVENT ================================
async function handleEvent(e) {
  if (e.type !== 'message' || e.message.type !== 'text') return;
  const msg = e.message.text.trim().toLowerCase();
  const gid = e.source.groupId || e.source.roomId;
  if (!gid) return;

  // ---------- DIRECT MESSAGE HAND (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß) ----------
  if (e.source.type === 'user' && HANDS.includes(msg)) {
    const gid = userToGroup.get(e.source.userId);
    if (!gid || !rooms.has(gid)) {
      await safeReply(e.replyToken, { type: 'text', text: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà' });
      return;
    }

    const pick = [
      (hand)=>`‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏µ‡∏¢‡∏ö‡∏°‡∏≤‡∏Å ${hand}  ‡∏£‡∏≠‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏∏‡πâ‡∏ô‡∏ú‡∏•‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!`,
      (hand)=>`‡πÄ‡∏ó‡πà‡∏°‡∏≤‡∏Å! ${hand} ‡∏Ñ‡∏∑‡∏≠‡∏´‡∏°‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏™‡∏∏‡∏î‡πÜ üòé  ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏î‡∏π‡∏ú‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏∞!`,
      (hand)=>`‡πÇ‡∏≠‡πâ‡πÇ‡∏´! ${hand} ‡∏ô‡∏µ‡πà‡∏•‡πà‡∏∞‡πÑ‡∏°‡πâ‡∏ï‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ô‡∏≤‡∏¢ üí•  ‡∏£‡∏≠‡∏Ñ‡∏π‡πà‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏°‡∏±‡∏ô‡∏™‡πå‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°!`,
      (hand)=>`‡∏à‡∏±‡∏î‡∏°‡∏≤‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô‡πÜ ${hand}  ‡∏Ç‡∏≠‡∏î‡∏π‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏™‡∏¥‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡∏à‡∏∞‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏Å‡∏ß‡πà‡∏≤ ‡∏£‡∏≠‡∏•‡∏∏‡πâ‡∏ô‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°!`,
      (hand)=>`‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏ô‡∏µ‡πà! ${hand}  ‡∏™‡∏π‡∏î‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏∂‡∏Å‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏•‡∏∏‡πâ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏¢!`
    ];
    const handLabel = `${msg.toUpperCase()} ${EMOJI[msg]}`;
    const message = pick[Math.floor(Math.random() * pick.length)](handLabel);
    await safeReply(e.replyToken, { type: 'text', text: message });
    return;
  }

  // ---------- GROUP COMMAND ----------
  if (!rooms.has(gid)) rooms.set(gid, { phase: 'idle', players: new Map(), admin: e.source.userId });
  const room = rooms.get(gid);

  switch (msg) {
    case 'janken open': {
      room.admin = e.source.userId;
      room.phase = 'register';
      room.players = new Map();

      const announce = [
        'üéå‚ú®  JANKEN TOURNAMENT ‡πÄ‡∏õ‡∏¥‡∏î‡∏â‡∏≤‡∏Å‡πÅ‡∏•‡πâ‡∏ß!! ‚ú®üéå',
        '',
        '‡πÉ‡∏Ñ‡∏£‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ä‡∏°‡∏õ‡πå‡∏™‡∏≤‡∏¢‡πÄ‡∏õ‡πà‡∏≤‡∏¢‡∏¥‡∏á‡∏â‡∏∏‡∏ö‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ üèÜ',
        '',
        '‡∏û‡∏¥‡∏°‡∏û‡πå üëâ  janken join  ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô',
        '‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 20 ‡∏Ñ‡∏ô ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‚ÄºÔ∏è',
        '',
        '‚è≥ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå  "janken close"  ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Ç‡πà‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!'
      ].join('\n');

      await safePush(gid, { type: 'text', text: announce });
      await safePush(gid, openBannerFlex());
      await safeReply(e.replyToken, [menuFlex(), { type: 'text', text: 'üü¢ ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏•‡πâ‡∏ß (‡∏û‡∏¥‡∏°‡∏û‡πå janken join ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°)' }]);
      break;
    }

    case 'janken join': {
      if (room.phase !== 'register') {
        await safeReply(e.replyToken, { type: 'text', text: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£' });
        break;
      }
      if (room.players.size >= 20) {
        await safeReply(e.replyToken, { type: 'text', text: '‡∏Ñ‡∏£‡∏ö 20 ‡∏Ñ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!' });
        break;
      }

      const profile = await client.getProfile(e.source.userId);
      room.players.set(e.source.userId, profile.displayName);
      userToGroup.set(e.source.userId, gid);
      await safePush(gid, { type: 'text', text: `‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß: ${profile.displayName} (‡∏£‡∏ß‡∏° ${room.players.size}/20)` });
      break;
    }

    case 'janken close': {
      if (room.phase !== 'register' || room.players.size < 2) {
        await safeReply(e.replyToken, { type: 'text', text: '‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏Ñ‡∏ô' });
        break;
      }
      room.phase = 'playing';
      const names = [...room.players.values()];
      const matches = names.map((n, i) => `Match ${i+1}: ${n} vs ‚Äî Bye ‚Äî`).join('\n');
      await safePush(gid, { type: 'text', text: `üì£ Match ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß (‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ${room.players.size})\n\n${matches}` });
      await safePush(gid, { type: 'text', text: 'üì© ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏•‡∏ô‡πå‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏±‡∏î‡∏î‡∏ß‡∏•‡∏Å‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì' });
      break;
    }

    case 'janken reset': {
      rooms.delete(gid);
      await safeReply(e.replyToken, { type: 'text', text: '‚ôªÔ∏è ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡πâ‡∏ß ‚Äî ‡∏û‡∏¥‡∏°‡∏û‡πå janken open ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà' });
      break;
    }

    case 'menu': {
      await safeReply(e.replyToken, menuFlex());
      break;
    }

    default:
      break;
  }
}
